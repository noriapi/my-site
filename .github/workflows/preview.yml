name: Deploy Preview

on: pull_request

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      deployments: write
    environment:
      name: Preview
      url: ${{ steps.deploy-workers-preview.outputs.deployment-url }}
    outputs:
      deployment-url: ${{ steps.deploy-workers-preview.outputs.deployment-url }}
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}

      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Deploy preview
        id: deploy-workers-preview
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: versions upload --message "Deployed by GitHub Actions branch ${{ github.ref_name }}"

      - name: Create comment file
        id: create-comment-file
        env:
          DEPLOYMENT_URL: "${{ steps.deploy-workers-preview.outputs.deployment-url }}"
        run: |
          cat  << EOF > comment.md
          ## ðŸš€ Deploying ${{ github.event.repository.name }} with Cloudflare Workers
          <table>
            <tr>
              <th scope="row">Workers Preview URL</th>
              <td><a href="$DEPLOYMENT_URL" target="_blank" rel="noopener noreferrer">$DEPLOYMENT_URL</a></td>
            </tr>
          </table>
          EOF

      - name: Create PR comment
        if: ${{ steps.deploy-workers-preview.outcome == 'success' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: "gh pr comment ${{ github.event.number }} --body-file comment.md"

  visual-tests:
    name: Visual Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      pull-requests: write
      contents: read
    outputs:
      comment-id: ${{ steps.comment-body.outputs.comment-id || steps.create-comment.outputs.comment-id }}
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}

      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: "pnpm"

      - name: Install partial dependencies
        run: pnpm install reg-cli

      - name: Take screenshots
        env:
          COMPOSE_BAKE: true
        run: pnpm docker:test

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Visual tests
        if: ${{ !cancelled() }}
        id: visual-test
        run: pnpm test:visual

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: reg-cli-report
          path: tests/screenshots/
          retention-days: 30

      - name: Create PR comment body
        uses: actions/github-script@v7
        if: ${{ !cancelled() }}
        id: comment-body
        env:
          FAILED: ${{ steps.visual-test.outcome == 'failure' }}
        with:
          script: |
            const script = require('./.github/scripts/reg-cli-comment-body.cjs')
            await script({github, context, core})

      - name: Create PR comment
        uses: wadackel/checkbox-workflow-action@v1
        if: ${{ !cancelled() && steps.visual-test.outcome == 'failure' }}
        id: create-comment
        with:
          id: vrt-command
          number: ${{ github.event.pull_request.number }}
          message: ${{ steps.comment-body.outputs.body }}
          config: |
            [ {"update-screenshots": "Update screenshots"} ]

  build-reports:
    name: Build reports
    if: ${{ !cancelled() }}
    needs: visual-tests
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}

      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Download reports
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          script: |
            const script = require('./.github/scripts/download-reports.cjs')
            await script({github, context, core})

      - name: Upload pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/

  deploy-reports:
    name: Deploy reports
    needs: [visual-tests, build-reports]
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      pull-requests: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update comment
        uses: actions/github-script@v7
        env:
          COMMENT_ID: ${{ needs.visual-tests.outputs.comment-id }}
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}
        with:
          script: |
            const { data: { body } } = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: process.env['COMMENT_ID'],
            })

            const regCliUrl = `${process.env['PAGE_URL']}${context.runId}/reg-cli-report/report.html`
            const playwrightUrl = `${process.env['PAGE_URL']}${context.runId}/playwright-report/index.html`

            const newBody = `${body}

            - [View reg-cli report](${regCliUrl})
            - [View playwright report](${playwrightUrl})
            `

            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: process.env['COMMENT_ID'],
              body: newBody
            })
