name: Deploy Preview

on: pull_request

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: Preview
      url: ${{ steps.deploy-workers-preview.outputs.deployment-url }}
    outputs:
      deployment-url: ${{ steps.deploy-workers-preview.outputs.deployment-url }}
    steps:
      - name: Generate GitHub token
        uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Deploy preview
        id: deploy-workers-preview
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: versions upload --message "Deployed by GitHub Actions branch ${{ github.ref_name }}"

      - name: Create comment file
        id: create-comment-file
        env:
          DEPLOYMENT_URL: "${{ steps.deploy-workers-preview.outputs.deployment-url }}"
        run: |
          cat  << EOF > comment.md
          ## üöÄ Deploying ${{ github.event.repository.name }} with Cloudflare Workers
          <table>
            <tr>
              <th scope="row">Workers Preview URL</th>
              <td><a href="$DEPLOYMENT_URL" target="_blank" rel="noopener noreferrer">$DEPLOYMENT_URL</a></td>
            </tr>
          </table>
          EOF

      - name: Create PR comment
        if: ${{ steps.deploy-workers-preview.outcome == 'success' }}
        run: "gh pr comment ${{ github.event.number }} --body-file comment.md"
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

  visual-tests:
    name: Visual Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    outputs:
      comment-id: ${{ steps.create-comment.outputs.comment-id }}
    steps:
      - name: Generate GitHub token
        uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: "pnpm"

      - name: Install partial dependencies
        run: pnpm install reg-cli

      - name: Take screenshots
        env:
          COMPOSE_BAKE: true
        run: pnpm docker:test

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Visual tests
        if: ${{ !cancelled() }}
        id: visual-test
        run: pnpm test:visual

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: reg-cli-report
          path: tests/screenshots/
          retention-days: 30

      - name: Create PR comment body
        uses: actions/github-script@v7
        if: ${{ !cancelled() }}
        id: comment-body
        env:
          FAILED: ${{ steps.visual-test.outcome == 'failure' }}
        with:
          result-encoding: string
          script: |
            const fs = require('fs')
            const jsonString = fs.readFileSync('./reg.json')
            const reg = JSON.parse(jsonString)
            const failed = process.env.FAILED === 'true'
            const body = `
            ## reg-cli

            <table>
              <thead>
                <tr>
                  <th scope="col">Item</th>
                  <th scope="col">Count</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <th scope="row">‚úÖÔ∏è Pass</th>
                  <td>${reg.passedItems.length}</td>
                </tr>
                <tr>
                  <th scope="row">‚ö†Ô∏è Change</th>
                  <td>${reg.diffItems.length}</td>
                </tr>
                <tr>
                  <th scope="row">‚ú® New</th>
                  <td>${reg.newItems.length}</td>
                </tr>
                <tr>
                  <th scope="row">‚ùì Delete</th>
                  <td>${reg.deletedItems.length}</td>
                </tr>
              </tbody>
            </table>

            ${failed ? "{{body}}" : ""}
            `
            return body

      - name: Create PR comment
        uses: wadackel/checkbox-workflow-action@v1
        if: ${{ steps.visual-test.outcome == 'failure' }}
        with:
          id: vrt-command
          number: ${{ github.event.pull_request.number }}
          token: ${{ steps.generate-token.outputs.token }}
          message: ${{ steps.comment-body.outputs.result }}
          config: |
            [ {"update-screenshots": "Update screenshots"} ]

      - name: Create PR comment (no checkbox)
        if: ${{ steps.visual-test.outcome == 'success' }}
        run: gh pr comment ${{ github.event.number }} --body ${{ steps.comment-body.outputs.result }}
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

  build-reports:
    name: Build reports
    if: ${{ !cancelled() }}
    needs: visual-tests
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub token
        uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - run: npm install @actions/artifact p-limit

      - name: Download reports
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          script: |
            const {DefaultArtifactClient} = require('@actions/artifact')
            const pLimit = require('p-limit').default
            const path = require('path')

            const artifactClient = new DefaultArtifactClient()
            const limit = pLimit(5)

            const downloadReports = async (artifactName) => {
              const artifacts = (await github.paginate(github.rest.actions.listArtifactsForRepo, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: artifactName,
              })).filter((a) => !a.expired);

              console.log(`Found artifact ${artifactName} IDs: ${JSON.stringify(artifacts.map((a) => a.id))}`)

              const tasks = artifacts.map((artifact) => async () => {
                const result = await artifactClient.downloadArtifact(artifact.id, {
                  findBy: {
                    token: process.env['GITHUB_TOKEN'],
                    workflowRunId: artifact.workflow_run.id,
                    repositoryOwner: context.repo.owner,
                    repositoryName: context.repo.repo
                  },
                  path: path.join("reports", `${artifact.workflow_run.id}`, artifactName),
                  expectedHash: artifact.digest
                })
                if (result.digestMismatch) {
                    throw new Error(
                      `Artifact '${artifact.id}' digest validation failed. Please verify the integrity of the artifact.`
                    )
                }
              }).map(limit)

              return tasks
            }

            const tasks = (await Promise.all(["playwright-report", "reg-cli-report"].map(downloadReports))).flat()

            await Promise.all(tasks)

            console.log(`Total of ${tasks.length} artifact(s) downloaded`)

      - name: Upload pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/

  deploy-reports:
    name: Deploy reports
    needs: [visual-tests, build-reports]
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Generate GitHub token
        uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update comment
        uses: actions/github-script@v7
        env:
          COMMENT_ID: ${{ needs.visual-tests.outputs.comment-id }}
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { data: { body } } = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: process.env['COMMENT_ID'],
            })

            const regCliUrl = `${process.env['PAGE_URL']}${context.runId}/reg-cli-report/report.html`
            const playwrightUrl = `${process.env['PAGE_URL']}${context.runId}/playwright-report/index.html`

            const newBody = `${body}

            - [View reg-cli report](${regCliUrl})
            - [View playwright report](${playwrightUrl})
            `

            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: process.env['COMMENT_ID'],
              body: newBody
            })
