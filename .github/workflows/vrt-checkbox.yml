name: "Handle Checkbox Changes"
on:
  issue_comment:
    types: [edited]

jobs:
  precheck:
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request
      && github.event.issue.state == 'open'
      && startsWith(github.event.comment.body, '<!-- checkbox-workflow-action:managed -->')
      && github.actor == 'noriapi'
    outputs:
      continue: ${{ steps.check-checkbox.outputs.changed == 'true' && fromJSON(steps.check-checkbox.outputs.state).update-screenshots }}
      comment-id: ${{ steps.check-checkbox.outputs.comment-id }}
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}

      - name: Detect changes
        id: check-checkbox
        uses: wadackel/checkbox-workflow-action@v1
        with:
          id: vrt-command
          number: ${{ github.event.issue.number }}

      - name: Eyes Reaction
        uses: actions/github-script@v7
        if: steps.check-checkbox.outputs.changed == 'true' && fromJSON(steps.check-checkbox.outputs.state).update-screenshots
        env:
          COMMENT_ID: ${{ steps.check-checkbox.outputs.comment-id }}
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              ...context.repo,
              comment_id: process.env.COMMENT_ID,
              content: "eyes"
            })

  main:
    needs: precheck
    runs-on: ubuntu-latest
    if: needs.precheck.outputs.continue == 'true'
    permissions:
      pull-requests: write
    steps:
      - uses: GitHubSecurityLab/actions-permissions/monitor@v1
        with:
          config: ${{ vars.PERMISSIONS_CONFIG }}

      - name: Generate GitHub token
        uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Get data
        id: data
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number
            })
            core.setOutput("ref", pr.data.head.ref)

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          ref: ${{ steps.data.outputs.ref }}

      - uses: docker/setup-buildx-action@v3

      - name: Build the backend image with cache
        uses: docker/build-push-action@v6
        with:
          load: true
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update screenshots
        run: docker compose run --rm -P tests pnpm playwright test --update-snapshots

      - name: Commit & Push
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git config --global --add safe.directory $PWD
          git add "./tests"
          git commit -m "Update screenshots"
          git push

      - name: Add +1 Reaction
        uses: actions/github-script@v7
        env:
          COMMENT_ID: ${{ needs.precheck.outputs.comment-id }}
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              ...context.repo,
              comment_id: process.env.COMMENT_ID,
              content: "+1"
            })

      - name: Add -1 Reaction on Failure
        if: failure()
        uses: actions/github-script@v7
        env:
          COMMENT_ID: ${{ needs.precheck.outputs.comment-id }}
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              ...context.repo,
              comment_id: process.env.COMMENT_ID,
              content: "-1"
            })
